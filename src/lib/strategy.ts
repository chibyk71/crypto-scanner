// src/lib/strategy.ts

/**
 * Imports technical indicator calculations used for generating trade signals.
 * These functions compute various market indicators such as EMA, RSI, MACD, etc.
 */
import {
    calculateEMA,
    calculateRSI,
    calculateMACD,
    calculateStochastic,
    calculateATR,
    calculateBollingerBands,
    calculateOBV,
    checkMACrossover,
} from './indicators';

/**
 * Defines the structure of a trade signal generated by the trading strategy.
 * A trade signal includes information about the trading decision, confidence level, and risk management parameters.
 */
export interface TradeSignal {
    /**
     * The trading symbol for which the signal is generated (e.g., 'BTC/USDT').
     */
    symbol: string;

    /**
     * The trading action to take: 'buy', 'sell', or 'hold'.
     */
    signal: 'buy' | 'sell' | 'hold';

    /**
     * The confidence level of the signal, expressed as a percentage (0-100).
     */
    confidence: number;

    /**
     * An array of reasons explaining why the signal was generated, based on indicator analysis.
     */
    reason: string[];

    /**
     * The stop-loss price for the trade, if applicable.
     */
    stopLoss?: number;

    /**
     * The take-profit price for the trade, if applicable.
     */
    takeProfit?: number;

    /**
     * The distance for a trailing stop-loss, if applicable, expressed as a fixed amount.
     */
    trailingStopDistance?: number;
}

/**
 * Defines the structure of market data used as input for generating trade signals.
 * Contains arrays of price and volume data for a specific symbol.
 */
export interface MarketData {
    /**
     * The trading symbol for the market data (e.g., 'BTC/USDT').
     */
    symbol: string;

    /**
     * An array of high prices for each candle in the dataset.
     */
    highs: number[];

    /**
     * An array of low prices for each candle in the dataset.
     */
    lows: number[];

    /**
     * An array of closing prices for each candle in the dataset.
     */
    closes: number[];

    /**
     * An array of trading volumes for each candle in the dataset.
     */
    volumes: number[];
}

/**
 * Implements a trading strategy that generates trade signals based on a weighted scoring system.
 * Uses multiple technical indicators to assess market conditions and assign a confidence score to buy/sell signals.
 * Incorporates risk management with stop-loss, take-profit, and trailing stop mechanisms.
 *
 * @property {number} riskRewardTarget - The target return on investment (ROI) in percent for take-profit levels.
 * @property {number} atrMultiplier - Multiplier for sizing stop-loss based on Average True Range (ATR).
 * @property {number} trailingStopPercent - The percentage for calculating the trailing stop-loss distance.
 * @property {number | null} lastAtr - The most recent ATR value calculated for risk management.
 */
export class Strategy {
    /**
     * The target return on investment (ROI) in percent for take-profit levels.
     * Used to calculate the take-profit price for buy and sell signals.
     * @public
     */
    public readonly riskRewardTarget: number;

    /**
     * Multiplier for sizing stop-loss based on Average True Range (ATR).
     * @default 1.5
     * @public
     */
    public readonly atrMultiplier: number = 1.5;

    /**
     * The percentage used to calculate the trailing stop-loss distance.
     * @default 3
     * @public
     */
    public readonly trailingStopPercent: number = 3;

    /**
     * Stores the most recent ATR value calculated during signal generation.
     * Used for stop-loss and take-profit calculations.
     * @default null
     * @public
     */
    public lastAtr: null | number = null;

    /**
     * Initializes the trading strategy with a configurable risk-reward target.
     * @param riskRewardTarget - The target ROI in percent for take-profit levels (default: 3).
     * @example
     * typescript
     * const strategy = new Strategy(5); // Sets a 5% risk-reward target
     *
     */
    constructor(riskRewardTarget = 3) {
        this.riskRewardTarget = riskRewardTarget;
    }

    /**
     * Generates a trade signal based on market data using a weighted scoring system.
     * Analyzes multiple technical indicators (EMA, RSI, MACD, Stochastic, Bollinger Bands, OBV, ATR)
     * to determine buy, sell, or hold signals with a confidence score.
     * Includes risk management parameters like stop-loss, take-profit, and trailing stop.
     *
     * @param m - The market data containing symbol, highs, lows, closes, and volumes.
     * @returns {TradeSignal} The generated trade signal with confidence, reasons, and risk management levels.
     * @example
     * typescript
     * const marketData = {
     *   symbol: 'BTC/USDT',
     *   highs: [51000, 51200, 51500],
     *   lows: [50500, 50800, 51000],
     *   closes: [50800, 51000, 51200],
     *   volumes: [100, 120, 110]
     * };
     * const signal = strategy.generateSignal(marketData);
     * console.log(signal); // { symbol: 'BTC/USDT', signal: 'buy', confidence: 75, ... }
     *
     */
    generateSignal(m: MarketData): TradeSignal {
        const { symbol, highs, lows, closes, volumes } = m;
        const reasons: string[] = [];
        const price = closes.at(-1)!;

        // --- Indicator Calculations ---
        /**
         * Calculate technical indicators to inform the trading decision.
         * Each indicator contributes to the buy/sell score and provides reasons for the signal.
         */
        const ema50 = calculateEMA(closes, 50);
        const ema200 = calculateEMA(closes, 200);
        const rsi = calculateRSI(closes, 14);
        const macd = calculateMACD(closes);
        const stoch = calculateStochastic(highs, lows, closes, 14, 3);
        const bb = calculateBollingerBands(closes);
        const obv = calculateOBV(closes, volumes);
        const atr = calculateATR(highs, lows, closes, 14);

        // --- Scoring System ---
        /**
         * Accumulate scores for buy and sell signals based on indicator confluence.
         * Each indicator contributes a weighted score to determine the final signal and confidence.
         */
        let buyScore = 0;
        let sellScore = 0;

        /**
         * Evaluate the long-term trend using EMA50 vs. EMA200.
         * A bullish trend (EMA50 > EMA200) adds to the buy score, while a bearish trend adds to the sell score.
         */
        const trend = ema50.at(-1)! > ema200.at(-1)! ? 'bullish' : 'bearish';
        if (trend === 'bullish') {
            buyScore += 25; // Changed from 20
            reasons.push('Long-term trend is bullish (EMA50 > EMA200)');
        } else {
            sellScore += 25; // Changed from 20
            reasons.push('Long-term trend is bearish (EMA50 < EMA200)');
        }

        /**
         * Check for Moving Average crossovers (Golden Cross or Death Cross).
         * These are high-weight signals due to their significance in trend changes.
         */
        const maCross = checkMACrossover(ema50, ema200);
        if (maCross === 'bullish') {
            buyScore += 30; // High-weight signal
            reasons.push('Golden Cross detected');
        } else if (maCross === 'bearish') {
            sellScore += 30; // High-weight signal
            reasons.push('Death Cross detected');
        }

        // RSI
        /**
         * Evaluate the Relative Strength Index (RSI) to assess overbought or oversold conditions.
         * RSI in a healthy range supports both buy and sell, while extreme values indicate reversals.
         */
        const rsiNow = rsi.at(-1)!;
        if (rsiNow > 60) reasons.push('RSI trending up');
        if (rsiNow < 40) reasons.push('RSI trending down');

        if (rsiNow > 70) {
            sellScore += 25; // Changed from 15
            reasons.push('RSI Overbought (potential reversal)');
        } else if (rsiNow < 30) {
            buyScore += 25; // Changed from 15
            reasons.push('RSI Oversold (potential bounce)');
        }

        // MACD
        /**
         * Evaluate the MACD histogram to assess momentum.
         * Positive histogram supports buy signals, negative supports sell signals.
         */
        const macdNow = macd.at(-1)!;
        if (macdNow.histogram > 0) {
            buyScore += 20; // Changed from 15
            reasons.push('MACD histogram is positive (bullish momentum)');
        } else {
            sellScore += 20; // Changed from 15
            reasons.push('MACD histogram is negative (bearish momentum)');
        }

        // Stochastic
        /**
         * Evaluate Stochastic oscillator to identify overbought or oversold conditions.
         * Crossovers in oversold/overbought areas contribute to buy/sell scores.
         */
        const stochNow = stoch.at(-1)!;
        if (stochNow.k < 20 && stochNow.k > stochNow.d) {
            buyScore += 5; // Changed from 10
            reasons.push('Stochastics turning up from oversold area');
        }
        if (stochNow.k > 80 && stochNow.k < stochNow.d) {
            sellScore += 5; // Changed from 10
            reasons.push('Stochastics turning down from overbought area');
        }

        // Bollinger Bands
        /**
         * Evaluate price position relative to Bollinger Bands.
         * Prices near the lower band suggest a buy, while prices near the upper band suggest a sell.
         */
        const bbNow = bb.at(-1)!;
        if (price <= bbNow.lower) {
            buyScore += 5; // Changed from 10
            reasons.push('Price near/below Bollinger Band lower (potential bounce)');
        } else if (price >= bbNow.upper) {
            sellScore += 5; // Changed from 10
            reasons.push('Price near/above Bollinger Band upper (potential reversal)');
        }

        // On-Balance Volume
        /**
         * Evaluate On-Balance Volume (OBV) to assess volume trends.
         * Rising OBV supports bullish moves, while falling OBV supports bearish moves.
         */
        if (obv.length >= 10 && obv.at(-1)! > obv.at(-10)!) {
            buyScore += 15;
            reasons.push('OBV rising (volume supports bullish move)');
        } else {
            sellScore += 15;
            reasons.push('OBV falling (volume supports bearish move)');
        }

        console.log(`Strategy Scores for ${symbol} - Buy: ${buyScore}, Sell: ${sellScore}`);

        // --- Decision & Confidence ---
        /**
         * Determine the final signal and confidence based on the accumulated scores.
         * A minimum score of 70 is required for a buy or sell signal; otherwise, a hold signal is issued.
         */
        let signal: 'buy' | 'sell' | 'hold' = 'hold';
        let confidence = 0;

        if (buyScore > sellScore && buyScore >= 65) {
            signal = 'buy';
            confidence = Math.min(100, buyScore);
        } else if (sellScore > buyScore && sellScore >= 65) {
            signal = 'sell';
            confidence = Math.min(100, sellScore);
        } else {
            confidence = Math.min(100, Math.max(buyScore, sellScore));
            reasons.push('No strong confluence for a buy/sell signal. Holding.');
        }

        // --- Risk Management Levels ---
        /**
         * Calculate stop-loss, take-profit, and trailing stop based on ATR and risk-reward parameters.
         * These levels are only set for buy or sell signals.
         */
        this.lastAtr = atr.at(-1)!;
        const stopLoss =
            signal === 'buy'
                ? price - this.atrMultiplier * this.lastAtr
                : signal === 'sell'
                    ? price + this.atrMultiplier * this.lastAtr
                    : undefined;

        const takeProfit =
            signal === 'buy'
                ? price * (1 + this.riskRewardTarget / 100)
                : signal === 'sell'
                    ? price * (1 - this.riskRewardTarget / 100)
                    : undefined;

        const trailingStopDistance = signal === 'buy' || signal === 'sell' ? price * (this.trailingStopPercent / 100) : undefined;

        return { symbol, signal, confidence, reason: reasons, stopLoss, takeProfit, trailingStopDistance };
    }
}

