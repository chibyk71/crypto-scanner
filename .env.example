# Runtime Environment Configuration
# -------------------------------
# ENV: Defines the environment for logging verbosity or debugging.
# - Expected Format: String, one of 'dev', 'prod', or 'test'.
# - Usage: Used in `settings.ts` to configure the application’s runtime behavior (e.g., enabling debug logs in 'dev' mode).
# - Default: 'dev'
# - Example: 'dev' for development, 'prod' for production.
ENV=dev

# LOG_LEVEL: Sets the logging verbosity for the application, using the `winston` logger.
# - Expected Format: String, one of 'error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly'.
# - Usage: Controls log output in `utils/logger.ts` (e.g., `createLogger('main')`).
# - Default: 'info'
# - Example: 'info' for standard logging, 'debug' for detailed troubleshooting.
LOG_LEVEL=info

# Database Configuration
# ---------------------
# DATABASE_URL: The connection URL for the SQLite database (local file or Turso LibSQL).
# - Expected Format: String, a valid URL (e.g., 'file:path/to/db' for local SQLite or 'libsql://your-db.turso.io' for Turso).
# - Usage: In `db/index.ts`, used by `@libsql/client` to initialize the database connection for `drizzle-orm`.
# - Example: 'file:/home/username/crypto-scanner/db/local.db' for local SQLite with absolute path.
# - Note: Ensure the directory has write permissions (e.g., chmod 775 for cPanel).
DATABASE_URL=file:local.db

# Exchange Configuration
# ---------------------
# EXCHANGE: The ID of the exchange to use with the `ccxt` library.
# - Expected Format: String, a valid `ccxt` exchange ID (e.g., 'bybit', 'binance', 'kraken').
# - Usage: In `exchange.ts`, used to instantiate the `ccxt` exchange (e.g., `new ccxt[EXCHANGE]`).
# - Default: 'bybit'
# - Example: 'bybit' for Bybit exchange.
# - Note: Ensure the exchange supports your trading symbols and timeframe.
EXCHANGE=bybit

# EXCHANGE_API_KEY: The API key for authenticating with the exchange.
# - Expected Format: String, provided by the exchange’s API dashboard.
# - Usage: In `exchange.ts` (ExchangeService constructor), used to initialize the `ccxt` exchange client.
# - Example: Obtain from the exchange’s API management page; keep secure.
# - Note: Optional; leave blank if not required for read-only operations.
EXCHANGE_API_KEY=

# EXCHANGE_API_SECRET: The API secret for authenticating with the exchange.
# - Expected Format: String, provided by the exchange’s API dashboard.
# - Usage: Paired with `EXCHANGE_API_KEY` in `exchange.ts` to authenticate API requests.
# - Example: Generated with `EXCHANGE_API_KEY` on the exchange; keep secure.
# - Note: Optional; leave blank if not required for read-only operations.
EXCHANGE_API_SECRET=

# Telegram Configuration
# --------------------
# TELEGRAM_BOT_TOKEN: The token for the Telegram bot to send alerts and heartbeats.
# - Expected Format: String, in the format 'botID:token'.
# - Usage: In `telegram.ts` (TelegramService constructor), initializes `node-telegram-bot-api`.
# - Example: Obtain from BotFather on Telegram; keep secure.
# - Note: Optional; leave blank if Telegram notifications are not used.
TELEGRAM_BOT_TOKEN=

# TELEGRAM_CHAT_ID: The ID of the Telegram chat or channel to receive messages.
# - Expected Format: String or integer, representing the chat ID (e.g., '-1001234567890' for a group/channel).
# - Usage: In `telegram.ts` (TelegramService.sendMessage), specifies the destination for alerts.
# - Example: Get by messaging @ChatIDBot on Telegram.
# - Note: Optional; leave blank if Telegram notifications are not used.
TELEGRAM_CHAT_ID=

# Trading Symbols Configuration
# -----------------------------
# SYMBOLS: A comma-separated list of trading pairs to scan for signals.
# - Expected Format: String, with pairs in the format 'BASE/QUOTE' (e.g., 'BTC/USDT').
# - Usage: In `scanner.ts` (MarketScanner constructor), defines the `symbols` array for scanning via `ccxt`.
# - Default: 'BTC/USDT,ETH/USDT'
# - Example: 'BTC/USDT,ETH/USDT,SOL/USDT' to scan Bitcoin, Ethereum, and Solana against USDT.
# - Note: Ensure symbols match your exchange’s format (e.g., Bybit uses 'BTC/USDT').
SYMBOLS=BTC/USDT,ETH/USDT,SOL/USDT,XRP/USDT,DOGE/USDT,TRX/USDT,ADA/USDT,AVAX/USDT,SHIB/USDT,LINK/USDT,DOT/USDT,NOT/USDT,LTC/USDT,UNI/USDT,ATOM/USDT,TON/USDT,ENA/USDT,SUI/USDT,WIF/USDT,ONDO/USDT,UNI/USDT,CORE/USDT

# Scanner Configuration
# --------------------
# TIMEFRAME: The primary candlestick timeframe for market data analysis.
# - Expected Format: String, one of supported values (e.g., '1m', '3m', '5m', '15m', '1h', '4h').
# - Usage: Passed to `ccxt.fetchOHLCV` in `exchange.ts` (ExchangeService.getOHLCV) to fetch candlestick data.
# - Default: '3m'
# - Example: '3m' for 3-minute candles, '1h' for 1-hour candles.
# - Note: Verify supported timeframes with your exchange (Bybit supports these via `ccxt`).
TIMEFRAME=3m

# HTF_TIMEFRAME: The higher timeframe used for multi-timeframe analysis.
# - Expected Format: String, one of supported values (e.g., '1h', '4h', '1d').
# - Usage: Used in `scanner.ts` for multi-timeframe signal alignment.
# - Default: '1h'
# - Example: '1h' for 1-hour candles as the higher timeframe.
HTF_TIMEFRAME=1h

# POLL_INTERVAL: The interval (in milliseconds) between market scan cycles.
# - Expected Format: Integer, representing milliseconds.
# - Usage: In `scanner.ts` (MarketScanner.start), sets the `setInterval` delay for continuous scans.
# - Default: 60000 (1 minute)
# - Example: 60000 (1 minute) for frequent scans, 300000 (5 minutes) for less frequent scans to avoid rate limits.
POLL_INTERVAL=60000

# HEARTBEAT_INTERVAL: The number of scan cycles between sending heartbeat messages to Telegram.
# - Expected Format: Integer, representing the number of scan cycles.
# - Usage: In `scanner.ts` (MarketScanner.runScanCycle), sends a Telegram message every `HEARTBEAT_INTERVAL` cycles.
# - Default: 60
# - Example: 60 means a heartbeat every 60 scans, useful for monitoring bot health.
HEARTBEAT_INTERVAL=60

# HISTORY_LENGTH: The number of historical candlesticks to fetch for technical analysis.
# - Expected Format: Integer, representing the number of candles.
# - Usage: In `exchange.ts` (ExchangeService.getOHLCV), passed as the `limit` parameter to `ccxt.fetchOHLCV`.
# - Default: 200
# - Example: 200 for sufficient data for moving averages or ATR calculations.
# - Note: Ensure this doesn’t exceed exchange API limits (Bybit allows up to 1000 candles per request).
HISTORY_LENGTH=200

# SCANNER_MODE: The mode in which the scanner operates for monitoring or trading.
# - Expected Format: String, one of 'single' or 'periodic'.
# - Usage: In `scanner.ts`, determines whether the scanner runs once ('single') or continuously ('periodic').
# - Default: 'periodic'
# - Example: 'single' for cron-based execution, 'periodic' for daemon-based execution.
SCANNER_MODE=periodic

# Strategy Configuration
# ---------------------
# ATR_MULTIPLIER: ATR multiplier used for calculating stop-loss distance.
# - Expected Format: Float or integer.
# - Usage: In `strategy.ts` (Strategy.generateSignal), adjusts stop-loss calculations.
# - Default: 1.5
# - Example: 1.5 for moderate risk, 2 for wider stop-loss.
ATR_MULTIPLIER=1.5

# RISK_REWARD_TARGET: Minimum risk-to-reward ratio target for trade signals.
# - Expected Format: Float or integer.
# - Usage: In `strategy.ts` (Strategy.generateSignal), filters signals based on risk/reward ratio.
# - Default: 2 (1:2 R:R)
# - Example: 2 for a 1:2 risk-to-reward ratio.
RISK_REWARD_TARGET=2

# TRAILING_STOP_PERCENT: Trailing stop distance expressed as a percentage of the price.
# - Expected Format: Float or integer.
# - Usage: In `strategy.ts`, sets the trailing stop distance for trade management.
# - Default: 0.5 (0.5%)
# - Example: 0.5 for a tight trailing stop, 1 for a looser stop.
TRAILING_STOP_PERCENT=0.5

# Application Configuration
# ------------------------
# LEVERAGE: The leverage multiplier for trading calculations.
# - Expected Format: Integer or float (e.g., 1 for no leverage, 2 for 2x leverage).
# - Usage: In `strategy.ts` (Strategy.generateSignal), adjusts risk/reward calculations.
# - Default: 1
# - Example: 1 for spot trading (no leverage), 5 for 5x leverage on futures.
LEVERAGE=1

# LOCK_TYPE: The type of locking mechanism to use for concurrency control.
# - Expected Format: String, one of 'file' or 'database'.
# - Usage: In `index.ts`, determines the locking mechanism for preventing concurrent scans.
# - Default: 'database'
# - Example: 'database' for SQLite-based locking, 'file' for file-based locking.
LOCK_TYPE=database

# API_PORT: The port number for the REST API server.
# - Expected Format: Integer, typically between 1024 and 65535.
# - Usage: In `index.ts` or `server.ts`, used to start the Express server (e.g., `app.listen(API_PORT)`).
# - Default: 3000
# - Example: 3000 for local development; ensure the port is open on your server.
API_PORT=3000

# Backtest Configuration
# ---------------------
# BACKTEST_START_DATE: The start date for backtesting.
# - Expected Format: String, in the format 'YYYY-MM-DD'.
# - Usage: In backtesting scripts, defines the start of the historical data range.
# - Default: '2024-01-01'
# - Example: '2024-01-01' for starting backtest from January 1, 2024.
BACKTEST_START_DATE=2024-01-01

# BACKTEST_END_DATE: The end date for backtesting.
# - Expected Format: String, in the format 'YYYY-MM-DD'.
# - Usage: In backtesting scripts, defines the end of the historical data range.
# - Default: '2025-10-05'
# - Example: '2025-10-05' for ending backtest on October 5, 2025.
BACKTEST_END_DATE=2025-10-05

# BACKTEST_TIMEFRAME: The candlestick timeframe for backtesting.
# - Expected Format: String, one of supported values (e.g., '1h', '4h', '1d').
# - Usage: In backtesting scripts, used to fetch historical candlestick data.
# - Default: '1h'
# - Example: '1h' for 1-hour candles.
BACKTEST_TIMEFRAME=1h

# BACKTEST_SYMBOLS: A comma-separated list of trading pairs for backtesting.
# - Expected Format: String, with pairs in the format 'BASE/QUOTE' (e.g., 'BTC/USDT').
# - Usage: In backtesting scripts, defines the symbols to test.
# - Default: 'BTC/USDT'
# - Example: 'BTC/USDT,ETH/USDT' to backtest Bitcoin and Ethereum against USDT.
BACKTEST_SYMBOLS=BTC/USDT

# BACKTEST_CYCLES_SKIP: The number of scan cycles to skip during backtesting.
# - Expected Format: Integer.
# - Usage: In backtesting scripts, controls the frequency of signal checks.
# - Default: 5
# - Example: 5 to skip every 5 cycles for faster backtesting.
BACKTEST_CYCLES_SKIP=5
