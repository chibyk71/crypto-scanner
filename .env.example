# Runtime Environment Configuration
# -------------------------------
# RUNTIME_ENV: Specifies the runtime environment for the bot, determining execution mode and locking mechanism.
# - Expected Format: String, one of 'server'or 'cron'.
# - Usage: In `index.ts`, sets worker options (lockType: 'file' or 'database', scannerMode: 'single' or 'periodic').
# - Values:
#   - 'server': For daemon (e.g., PM2), uses file-based locking and periodic scanning.
#   - 'cron': For cron, uses database locking and single scans to avoid resource issues on shared hosting.
# - Example: 'cron' for cron-based execution on cPanel, 'local' for PM2 daemon.
RUNTIME_ENV=server

# General Configuration
# -------------------
# ENV: Defines the environment for logging verbosity or debugging.
# - Expected Format: String, typically 'dev', 'prod', or 'test'.
# - Usage: Used in `index.ts` or `config/settings.ts` to configure the bot’s runtime behavior (e.g., enabling debug logs in 'dev' mode).
# - Example: 'dev' for development, 'prod' for production on cPanel.
ENV=dev

# LOG_LEVEL: Sets the logging verbosity for the bot, using the `winston` logger.
# - Expected Format: String, one of 'ERROR', 'WARN', 'INFO', 'DEBUG' (case-insensitive).
# - Usage: Controls log output in `utils/logger.ts` (e.g., `createLogger('main')`). 'INFO' logs operational messages like "Lock acquired" or errors like "NetworkError".
# - Example: 'INFO' for standard logging, 'DEBUG' for detailed troubleshooting.
LOG_LEVEL=INFO

# POLL_INTERVAL: The interval (in milliseconds) between market scan cycles in `scanner.ts`.
# - Expected Format: Integer, representing milliseconds.
# - Usage: Used in `scanner.ts` (MarketScanner.start) to set the `setInterval` delay for continuous scans (e.g., 300,000 ms = 5 minutes).
# - Example: 60,000 (1 minute) for frequent scans, 300,000 (5 minutes) for less frequent scans to avoid rate limits.
# - Note: For cPanel with cron, this is ignored in single-scan mode (RUNTIME_ENV=cpanel).
POLL_INTERVAL=300000

# HEARTBEAT_INTERVAL: The number of scan cycles between sending heartbeat messages to Telegram.
# - Expected Format: Integer, representing the number of scan cycles.
# - Usage: In `scanner.ts` (MarketScanner.runScanCycle), sends a Telegram message every `HEARTBEAT_INTERVAL` cycles.
# - Example: 60 means a heartbeat every 60 scans, useful for monitoring bot health on cPanel.
HEARTBEAT_INTERVAL=60

# Symbols and Trading Configuration
# -------------------------------
# SYMBOLS: A comma-separated list of trading pairs to scan for signals.
# - Expected Format: String, with pairs in the format 'BASE/QUOTE' (e.g., 'BTC/USDT').
# - Usage: In `scanner.ts` (MarketScanner constructor), defines the `symbols` array for scanning via `ccxt`.
# - Example: 'BTC/USDT,ETH/USDT' to scan Bitcoin and Ethereum against USDT.
# - Note: Ensure symbols match your exchange’s format (e.g., Gate.io uses 'BTC_USDT' for some pairs).
SYMBOLS=BTC/USDT,ETH/USDT,BNB/USDT,SOL/USDT,XRP/USDT,DOGE/USDT,ADA/USDT,AVAX/USDT,TON/USDT,DOT/USDT

# TIMEFRAME: The candlestick timeframe for market data analysis, in minutes.
# - Expected Format: String, one of supported values (1m, 3m, 5m, 15m, 1h, 2h, 4h, 6h, 8h, 12h).
# - Usage: Passed to `ccxt.fetchOHLCV` in `exchange.ts` (ExchangeService.getOHLCV) to fetch candlestick data.
# - Example: 3m for 3-minute candles, 1h for 1-hour candles.
# - Note: Verify supported timeframes with your exchange (Gate.io supports these via `ccxt`).
TIMEFRAME=1h

# LEVERAGE: The leverage multiplier for trading calculations (if applicable).
# - Expected Format: Integer or float (e.g., 1 for no leverage, 2 for 2x leverage).
# - Usage: Used in `strategy.ts` (Strategy.generateSignal) to adjust risk/reward calculations.
# - Example: 1 for spot trading (no leverage), 5 for 5x leverage on futures.
# - Note: For Gate.io spot trading, set to 1 as leverage is typically for futures.
LEVERAGE=1

# HISTORY_LENGTH: The number of historical candlesticks to fetch for technical analysis.
# - Expected Format: Integer, representing the number of candles.
# - Usage: In `exchange.ts` (ExchangeService.getOHLCV), passed as the `limit` parameter to `ccxt.fetchOHLCV`.
# - Example: 200 for sufficient data for moving averages or ATR calculations.
# - Note: Ensure this doesn’t exceed exchange API limits (Gate.io allows up to 1000 candles per request).
HISTORY_LENGTH=200

# Exchange Configuration
# ---------------------
# EXCHANGE_API_KEY: The API key for authenticating with the exchange (e.g., Gate.io).
# - Expected Format: String, provided by the exchange’s API dashboard.
# - Usage: In `exchange.ts` (ExchangeService constructor), used to initialize the `ccxt` exchange client.
# - Example: Obtain from Gate.io’s API management page; keep secure.
# - Note: For cPanel, ensure the server’s IP is whitelisted if required by the exchange.
EXCHANGE_API_KEY=

# EXCHANGE_API_SECRET: The API secret for authenticating with the exchange.
# - Expected Format: String, provided by the exchange’s API dashboard.
# - Usage: Paired with `EXCHANGE_API_KEY` in `exchange.ts` to authenticate API requests.
# - Example: Generated with `EXCHANGE_API_KEY` on Gate.io; keep secure.
EXCHANGE_API_SECRET=

# EXCHANGE: The ID of the exchange to use with the `ccxt` library.
# - Expected Format: String, matching a valid `ccxt` exchange ID (e.g., 'gate', 'binance', 'kraken').
# - Usage: In `exchange.ts`, used to instantiate the `ccxt` exchange (e.g., `new ccxt[EXCHANGE]`).
# - Example: 'gate' for Gate.io, as specified in your .env.
# - Note: Ensure the exchange supports your `SYMBOLS` and `TIMEFRAME`.
EXCHANGE=gate

# Telegram Configuration
# --------------------
# TELEGRAM_BOT_TOKEN: The token for the Telegram bot to send alerts and heartbeats.
# - Expected Format: String, in the format 'botID:token'.
# - Usage: In `telegram.ts` (TelegramService constructor), initializes `node-telegram-bot-api`.
# - Example: Obtain from BotFather on Telegram; keep secure.
# - Note: Ensure the bot is added to the target chat or channel.
TELEGRAM_BOT_TOKEN=

# TELEGRAM_CHAT_ID: The ID of the Telegram chat or channel to receive messages.
# - Expected Format: String or integer, representing the chat ID (e.g., '-1001234567890' for a group/channel).
# - Usage: In `telegram.ts` (TelegramService.sendMessage), specifies the destination for alerts.
# - Example: Get by messaging @ChatIDBot on Telegram.
TELEGRAM_CHAT_ID=

# Storage Configuration
# -------------------
# DATABASE_URL: The connection URL for the SQLite database (local file or Turso LibSQL).
# - Expected Format: String, either 'file:path/to/db' for local SQLite or 'libsql://your-db.turso.io' for Turso.
# - Usage: In `db/index.ts`, used by `@libsql/client` to initialize the database connection for `drizzle-orm`.
# - Example: 'file:/home/username/crypto-scanner/db/local.db' for cPanel with absolute path.
# - Note: For cPanel, ensure the directory has write permissions (chmod 775).
DATABASE_URL=file:local.db
